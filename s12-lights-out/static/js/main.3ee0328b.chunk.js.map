{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coords","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","_this$props","nrows","ncols","chanceLightStartsOn","y","x","Math","random","coord","_this$props2","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","setState","st","every","row","cell","_this2","key","src_Cell_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ee0328b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Cell.css';\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe(this.props.coords);\r\n  }\r\n\r\n  render() {\r\n    let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\r\n\r\n    return <td className={classes} onClick={this.handleClick} />;\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css';\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { hasWon: false, board: this.createBoard() };\r\n    this.flipCellsAround = this.flipCellsAround.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartsOn: 0.25\r\n  };\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    const { nrows, ncols, chanceLightStartsOn } = this.props;\r\n    let board = [];\r\n    for (let y = 0; y < nrows; y++) {\r\n      board[y] = [];\r\n      for (let x = 0; x < ncols; x++) {\r\n        board[y][x] = Math.random() < chanceLightStartsOn;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let { ncols, nrows } = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split('-').map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    flipCell(y, x);\r\n    flipCell(y - 1, x);\r\n    flipCell(y + 1, x);\r\n    flipCell(y, x - 1);\r\n    flipCell(y, x + 1);\r\n\r\n    // win when every cell is turned off\r\n\r\n    this.setState(st => {\r\n      //Reduce each row to true or false, and use them to reduce the board to true or false\r\n      const hasWon = st.board.every(row => row.every(cell => !cell));\r\n      return { board, hasWon };\r\n    });\r\n  }\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        {this.state.hasWon ? (\r\n          <h1>\r\n            <span className=\"Board-title Board-red\">You</span> <span className=\"Board-title Board-blue\">Win!</span>\r\n          </h1>\r\n        ) : (\r\n          <div>\r\n            <h1>\r\n              <span className=\"Board-title Board-red\">Lights</span> <span className=\"Board-title Board-blue\">Out</span>\r\n            </h1>\r\n            <table className=\"Board-table\">\r\n              <tbody>\r\n                {this.state.board.map((row, y) => (\r\n                  <tr key={'row' + y}>\r\n                    {row.map((cell, x) => (\r\n                      <Cell key={y + '-' + x} coords={y + '-' + x} flipCellsAroundMe={this.flipCellsAround} isLit={cell} />\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n\r\n    // if the game is won, just show a winning msg & render nothing else\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./App.css\";\r\n\r\n/** Simple app that just shows the LightsOut game. */\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <Board />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}